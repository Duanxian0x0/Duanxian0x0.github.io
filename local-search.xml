<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0x0  shell编程</title>
    <link href="/2025/01/18/0x0-shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/01/18/0x0-shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本。</p></blockquote><p>Unix&#x2F;Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>打开文本编辑器，新建一个文件<code>test.sh</code>，扩展名为<code>.sh</code>（sh代表shell）。</p><p>输入一些代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World !&quot;</span><br></code></pre></td></tr></table></figure><p>在命令行运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x test.sh<br>./test.sh<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hello World !<br></code></pre></td></tr></table></figure><p><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即<strong>使用哪一种Shell</strong>。<code>echo</code>命令用于向窗口输出文本。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以<code>#</code>开头的行就是注释，会被解释器忽略。sh里没有多行注释，只能每一行加一个#号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># --------</span><br><span class="hljs-comment"># 这是注释块</span><br><span class="hljs-comment"># --------</span><br></code></pre></td></tr></table></figure><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><p><strong>echo</strong>： 是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> arg <br><span class="hljs-built_in">echo</span> -e arg <span class="hljs-comment">#执行arg里的转义字符。echo加了-e默认会换行</span><br><span class="hljs-built_in">echo</span> arg &gt; myfile <span class="hljs-comment">#显示结果重定向至文件，会生成myfile文件</span><br></code></pre></td></tr></table></figure><p>注意，echo后单引号和双引号作用是不同的。单引号不能转义里面的字符。双引号可有可无，单引号主要用在原样输出中。</p><p><strong>printf</strong>：格式化输出语句。<br><code>printf</code> 命令用于格式化输出， 是<code>echo</code>命令的增强版。它是C语言<code>printf()</code>库函数的一个有限的变形，并且在语法上有些不同。</p><p>如同 <code>echo</code> 命令，<code>printf</code> 命令也可以输出简单的字符串:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;hello\n&quot;</span><br></code></pre></td></tr></table></figure><p><code>printf</code> 不像 <code>echo</code> 那样会自动换行，必须显式添加换行符(\n)。</p><p>注意：<code>printf</code> 由 POSIX 标准所定义，移植性要比 <code>echo</code> 好。</p><p>printf 命令的语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span>  format-string  [arguments...]<br><br><span class="hljs-comment">#format-string 为格式控制字符串，arguments 为参数列表。功能和用法与c语言的 printf 命令类似。</span><br></code></pre></td></tr></table></figure><p>这里仅说明与C语言printf()函数的不同：</p><ul><li>printf 命令不用加括号</li><li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li><li>参数比格式控制符(%)多时，格式控制符可以重用，可以将所有参数都转换。</li><li>arguments 使用空格分隔，不用逗号。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 双引号</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%d %s\n&quot;</span> 10 <span class="hljs-string">&quot;abc&quot;</span><br>10 abc<br><span class="hljs-comment"># 单引号与双引号效果一样 </span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%d %s\n&#x27;</span> 10 <span class="hljs-string">&quot;abc&quot;</span> <br>10 abc<br><br><span class="hljs-comment"># 没有引号也可以输出</span><br><span class="hljs-built_in">printf</span> %s abc<br>abc<br><br><span class="hljs-comment"># 但是下面的会出错：</span><br><span class="hljs-built_in">printf</span> %d %s 10 abc <br><span class="hljs-comment">#因为系统分不清楚哪个是参数，这时候最好加引号了。</span><br><br><br><span class="hljs-comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span><br>$ <span class="hljs-built_in">printf</span> %s a b c<br>abc<br>$ <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> a b c<br>a<br>b<br>c<br><br><span class="hljs-comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span><br>$ <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s and %d \n&quot;</span> <br>and 0<br><br><span class="hljs-comment"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span><br>$ <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;The first program always prints&#x27;%s,%d\n&#x27;&quot;</span> Hello Shell<br>-bash: <span class="hljs-built_in">printf</span>: Shell: invalid number<br>The first program always prints <span class="hljs-string">&#x27;Hello,0&#x27;</span><br>$<br></code></pre></td></tr></table></figure><p><strong>read</strong>： 命令行从输入设备读入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Author : lalal</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;What is your name?&quot;</span><br><span class="hljs-built_in">read</span> NAME <span class="hljs-comment">#输入</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$NAME</span>&quot;</span><br></code></pre></td></tr></table></figure><p>运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x test.sh<br>./test.sh<br><br>What is your name?<br>lalal<br><br>Hello, lalal<br></code></pre></td></tr></table></figure><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>Shell支持自定义变量。</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量时，变量名不加美元符号（$），如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">variableName=<span class="hljs-string">&quot;value&quot;</span><br></code></pre></td></tr></table></figure><p>注意，<strong>变量名和等号之间不能有空格</strong>，这可能和你熟悉的所有编程语言都不一样。有空格会出错。</p><p>同时，变量名的命名须遵循如下规则：</p><blockquote><ul><li>首个字符必须为字母（a-z，A-Z）。</li></ul></blockquote><ul><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>变量定义举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">myUrl=<span class="hljs-string">&quot;lalal&quot;</span><br>myNum=100<br></code></pre></td></tr></table></figure><blockquote><p>注意：变量中间不能有空格，如果手误写错(例如 <code>var = test</code>)，刚好要使用<code>rm -rf $var/</code>删除这个目录，实际删除的是<code>/</code>！</p></blockquote><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">your_name=<span class="hljs-string">&quot;lalal&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$your_name</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;your_name&#125;</span><br></code></pre></td></tr></table></figure><p><strong>变量名外面的花括号是可选的</strong>，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> skill <span class="hljs-keyword">in</span> C PHP Python Java <br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;I am good at <span class="hljs-variable">$&#123;skill&#125;</span>Script&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>如果不给skill变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p><strong>推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p><blockquote><p>已定义的变量，可以被重新定义。</p></blockquote><p>在变量前面加<code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br><span class="hljs-built_in">readonly</span> url<br>url=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br></code></pre></td></tr></table></figure><p>使用 <code>unset</code> 命令可以删除变量。语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> variable_name<br></code></pre></td></tr></table></figure><p>变量被删除后不能再次使用；unset 命令不能删除只读变量。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：<br><strong>1) 局部变量</strong><br>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><p><strong>2) 环境变量</strong><br>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p><p><strong>3) shell变量</strong><br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p>前面已经讲到，<strong>变量名只能包含数字、字母和下划线</strong>，因为某些包含其他字符的变量有特殊含义，这样的变量被称为<strong>特殊变量</strong>。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前脚本的文件名</td></tr><tr><td><code>$n</code></td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code>。</td></tr><tr><td><code>$#</code></td><td>传递给脚本或函数的参数个数。</td></tr><tr><td><code>$*</code></td><td>传递给脚本或函数的所有参数。</td></tr><tr><td><code>$@</code></td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 <code>$*</code> 稍有不同</td></tr><tr><td><code>$?</code></td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td><code>$$</code></td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;File Name: <span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;First Parameter : <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Second Parameter : <span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Quoted Values: <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Quoted Values: $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Total Number of Parameters : <span class="hljs-variable">$#</span>&quot;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$./test.sh Zara Ali<br>File Name : ./test.sh<br>First Parameter : Zara<br>Second Parameter : Ali<br>Quoted Values: Zara Ali<br>Quoted Values: Zara Ali<br>Total Number of Parameters : 2<br></code></pre></td></tr></table></figure><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a><code>$*</code> 和 <code>$@</code> 的区别</h3><p><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”<code>$*</code>“ 会将所有的参数作为一个整体，以”<code>$1 $2 … $n</code>“的形式输出所有参数；”<code>$@</code>“ 会将各个参数分开，以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$*=&quot;</span> $*<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\&quot;\$*\&quot;=&quot;</span> <span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$@=&quot;</span> <span class="hljs-variable">$@</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\&quot;\$@\&quot;=&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;print each param from \$*&quot;</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> $*<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;print each param from \$@&quot;</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;print each param from \&quot;\$*\&quot;&quot;</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;print each param from \&quot;\$@\&quot;&quot;</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>执行 <code>./test.sh &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;</code>，看到下面的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$*=  a b c d<br><span class="hljs-string">&quot;$*&quot;</span>= a b c d<br><span class="hljs-variable">$@</span>=  a b c d<br><span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>= a b c d<br><span class="hljs-built_in">print</span> each param from $*<br>a<br>b<br>c<br>d<br><span class="hljs-built_in">print</span> each param from <span class="hljs-variable">$@</span><br>a<br>b<br>c<br>d<br><span class="hljs-built_in">print</span> each param from <span class="hljs-string">&quot;$*&quot;</span><br>a b c d<br><span class="hljs-built_in">print</span> each param from <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>a<br>b<br>c<br>d<br></code></pre></td></tr></table></figure><h3 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h3><p><code>$?</code> 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [[ $? != 0 ]];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;error&quot;</span><br>  <span class="hljs-built_in">exit</span> 1;<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">转义字符含义<br>\\反斜杠<br>\a警报，响铃<br>\b退格（删除键）<br>\f换页(FF)，将当前位置移到下页开头<br>\n换行<br>\r回车<br>\t水平制表符（tab键） <br>\v垂直制表符<br></code></pre></td></tr></table></figure><p><strong>shell默认是不转义上面的字符的。需要加<code>-e</code>选项。</strong></p><p>举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=11<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;a is <span class="hljs-variable">$a</span> \n&quot;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a is 11<br></code></pre></td></tr></table></figure><p>这里 <code>-e</code> 表示对转义字符进行替换。如果不使用 <code>-e</code> 选项，将会原样输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a is 11\n<br></code></pre></td></tr></table></figure><p>可以使用 echo 命令的 <code>-E</code> 选项禁止转义，默认也是不转义的；使用 <code>-n</code> 选项可以禁止插入换行符。</p><h2 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h2><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">command</span>`<br></code></pre></td></tr></table></figure><p><strong>注意是反引号，不是单引号，这个键位于 Esc 键下方。</strong></p><p>下面的例子中，将命令执行结果保存在变量中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>DATE=`<span class="hljs-built_in">date</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Date is <span class="hljs-variable">$DATE</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h2><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值。</p><p>可以使用的变量替换形式：</p><table><thead><tr><th>形式</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;var&#125;</code></td><td>变量本来的值</td></tr><tr><td><code>$&#123;var:-word&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，但不改变 <code>var</code> 的值。</td></tr><tr><td><code>$&#123;var:=word&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，并将 <code>var</code> 的值设置为 word。</td></tr><tr><td><code>$&#123;var:?message&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 <code>var</code> 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。</td></tr><tr><td><code>$&#123;var:+word&#125;</code></td><td>如果变量 <code>var</code> 被定义，那么返回 word，但不改变 var 的值。</td></tr></tbody></table><h2 id="一个完整的shell示例"><a href="#一个完整的shell示例" class="headerlink" title="一个完整的shell示例"></a>一个完整的shell示例</h2><p>下面的脚本用于php安装过程中安装zip扩展。</p><p><code>php_zip_ins.sh</code></p><pre><code class="language-bash">#!/bin/bash#zip installif [ -d php-5.4.25/ext/zip ];thencd php-5.4.25/ext/zipelsetar zxvf php-5.4.25.tar.gzcd php-5.4.25/ext/zipfi/usr/local/php/bin/phpize./configure --with-php-config=/usr/local/php/bin/php-configmake[ $? != 0 ] &amp;&amp; exitmake installecho grep &#39;no-debug-zts-20100525&#39; /usr/local/php/etc/php.iniif [ $? != 0 ];then        echo &#39;&#39; &gt;&gt; /usr/local/php/etc/php.ini        echo &#39;extension_dir=/usr/local/php/lib/php/extensions/no-debug-zts-20100525&#39; &gt;&gt; /usr/local/php/etc/php.inifigrep &#39;zip.so&#39; /usr/local/php/etc/php.iniif [ $? != 0 ];thenecho &#39;extension=zip.so&#39; &gt;&gt; /usr/local/php/etc/php.inifiecho &quot;zip install is OK&quot;/usr/local/apache2/bin/apachectl restartcd -rm -rf php-5.4.25echo &quot;all ok!&quot;ls /usr/local/php/lib/php/extensions/no-debug-zts-20100525/</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>shell  linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2025/01/18/hello-world/"/>
    <url>/2025/01/18/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
